set encoding=utf-8
""""""""""""""""""""""""""""""
" vim plug automatic installation
""""""""""""""""""""""""""""""

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Specify a directory for plugins
" Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" nerd commenter
Plug 'scrooloose/nerdcommenter'
" lightline
Plug 'itchyny/lightline.vim'
" ack
Plug 'mileszs/ack.vim'
" auto pair
Plug 'jiangmiao/auto-pairs'
" better white space
Plug 'ntpeters/vim-better-whitespace'
" intent line
" Plug 'Yggdroot/indentLine'
" vim-codefmt
" Add maktaba and codefmt to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
" Also add Glaive, which is used to configure codefmt's maktaba flags.
Plug 'google/vim-glaive'
" mirror
Plug 'zenbro/mirror.vim'
" themes
Plug 'junegunn/seoul256.vim'
Plug 'sainnhe/gruvbox-material'
" coc
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" vim-clap
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
" fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" rainbow
Plug 'luochen1990/rainbow'


" Initialize plugin system
call plug#end()
""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""
" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

set nocompatible    " disable backward compatibility with Vi
filetype plugin on  " plugins are enabled

" Enable file plugins
filetype plugin indent on
filetype indent on

" Turn on the WiLd menu
set wildmenu

" mode information is displayed in the statusline
set noshowmode

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
map <leader>t<leader> :tabnext<cr>

map gb :tabp<CR>

" Set to auto read when a file is changed from the outside
set autoread

" Always show current position
set ruler

" Show tab
set list
set listchars=tab:>-

" Enable syntax highlighting
syntax enable

" Use spaces instead of tabs
set expandtab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 80 characters
set lbr
set tw=80

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Insert blank line without entering insert mode
map <CR> o<Esc>

nmap <leader>s :w<CR>

" Set line number and relative number
set number
set relativenumber
" Set 7 lines to the cursor - when moving vertically using j/k
" Short for scrolloff
set so=7

" Highlight current line
set cursorline

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=1

" Enable true color 启用终端24位色
" if exists('+termguicolors')
  " let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  " let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  " set termguicolors
" endif

" Colorscheme
" let g:seoul256_background = 233
" let g:seoul256_light_background = 252
" colo  seoul256
" colo  seoul256-light

" set t_Co=256
set background=dark
" colo PaperColor

let g:gruvbox_material_background = 'soft'
let g:gruvbox_material_enable_italic = 1
let g:gruvbox_material_disable_italic_comment = 1
colorscheme gruvbox-material

set colorcolumn=80

" Auto indent
set ai
" Smart indent
set si
" Wrap lines
set wrap

" No swap files
set noswapfile

" When searching try to be smart about cases
set smartcase
"
" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

set termguicolors

set mouse=a

nnoremap <silent> <2-LeftMouse> :let @/='\V\<'.escape(expand('<cword>'), '\').'\>'<cr>:set hls<cr>

" Nerd commenter: add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" indentLine
let g:indentLine_setColors = 0

" better whitespace
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1

call glaive#Install()
Glaive codefmt plugin[mappings]
Glaive codefmt clang_format_executable='/home/fengyupu/bin/miniconda3/bin/clang-format'
Glaive codefmt buildifier_executable='/home/fengyupu/bin/go/bin/buildifier'
Glaive codefmt clang_format_style='file'

au BufRead,BufNewFile *.BUILD set filetype=bzl
augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,json AutoFormatBuffer js-beautify
  autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
augroup END

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

set clipboard=unnamedplus

" lightline
let g:lightline = {
      \ 'colorscheme': 'gruvbox_material',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'full_filename', 'modified' ] ]
      \ },
      \ 'component': {
      \   'full_filename': '%F'
      \ },
      \ }

" search for visually selected text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*





" -----------------------------------------------------------------------------
" coc explorer
" -----------------------------------------------------------------------------
nnoremap <leader>e :CocCommand explorer<CR>
" reveal current buffer in coc-explorer
nnoremap <leader>er :call CocAction('runCommand', 'explorer.doAction', 'closest', ['reveal:0'], [['relative', 0, 'file']])<CR>
" -----------------------------------------------------------------------------
" coc fzf-preview
" -----------------------------------------------------------------------------
nmap <Leader>f [fzf-p]
xmap <Leader>f [fzf-p]
nnoremap <silent> [fzf-p]p     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
nnoremap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
nnoremap <silent> [fzf-p]ga    :<C-u>CocCommand fzf-preview.GitActions<CR>
nnoremap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
nnoremap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
nnoremap <silent> [fzf-p]o     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
nnoremap <silent> [fzf-p]<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
nnoremap <silent> [fzf-p]g;    :<C-u>CocCommand fzf-preview.Changes<CR>
nnoremap <silent> [fzf-p]/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
nnoremap <silent> [fzf-p]*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
nnoremap          [fzf-p]g    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
xnoremap          [fzf-p]g    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
nnoremap <silent> [fzf-p]t     :<C-u>CocCommand fzf-preview.BufferTags<CR>
nnoremap <silent> [fzf-p]q     :<C-u>CocCommand fzf-preview.QuickFix<CR>
nnoremap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>
nnoremap          [fzf-p]f    :<C-u>CocCommand fzf-preview.ProjectFiles<CR>

augroup fzf_preview
  autocmd!
  autocmd User fzf_preview#rpc#initialized call s:fzf_preview_settings() " fzf_preview#remote#initialized or fzf_preview#coc#initialized
augroup END

function! s:fzf_preview_settings() abort
  let g:fzf_preview_command = 'COLORTERM=truecolor ' . g:fzf_preview_command
  let g:fzf_preview_grep_preview_cmd = 'COLORTERM=truecolor ' . g:fzf_preview_grep_preview_cmd
endfunction
" -----------------------------------------------------------------------------
" rainbow
" -----------------------------------------------------------------------------
let g:rainbow_active = 1
